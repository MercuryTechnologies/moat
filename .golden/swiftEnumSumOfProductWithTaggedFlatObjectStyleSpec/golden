enum Enum: Codable {
    case dataCons0(Record0)
    case dataCons1(Record1)
    case dataCons2
    case _unknown

    enum CodingKeys: String, CodingKey {
        case tag
    }

    init(from decoder: any Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let discriminator = try container.decode(String.self, forKey: .tag)
        switch discriminator {
            case "dataCons0":
                self = .dataCons0(try Record0.init(from: decoder))
            case "dataCons1":
                self = .dataCons1(try Record1.init(from: decoder))
            case "dataCons2":
                self = .dataCons2
            default:
                self = ._unknown
        }
    }

    func encode(to encoder: any Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch (self) {
            case let .dataCons0(value):
                try container.encode("dataCons0", forKey: .tag)
                try value.encode(to: encoder)
            case let .dataCons1(value):
                try container.encode("dataCons1", forKey: .tag)
                try value.encode(to: encoder)
            case .dataCons2:
                try container.encode("dataCons2", forKey: .tag)
            case ._unknown:
                throw EncodingError.invalidValue(
                    self,
                    .init(codingPath: encoder.codingPath, debugDescription: "Can't encode value: Enum._unknown")
                )
        }
    }
}